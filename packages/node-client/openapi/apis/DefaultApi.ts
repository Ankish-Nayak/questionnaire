/* tslint:disable */
/* eslint-disable */
/**
 * Questionnaire Open Api
 * Questionnaire api description
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StudentLoginDto,
  StudentSignupDto,
  StudentUpdateProfileDto,
  TeacherLoginDto,
  TeacherSignupDto,
  TeacherUpdateProfileDto,
} from '../models/index';
import {
    StudentLoginDtoFromJSON,
    StudentLoginDtoToJSON,
    StudentSignupDtoFromJSON,
    StudentSignupDtoToJSON,
    StudentUpdateProfileDtoFromJSON,
    StudentUpdateProfileDtoToJSON,
    TeacherLoginDtoFromJSON,
    TeacherLoginDtoToJSON,
    TeacherSignupDtoFromJSON,
    TeacherSignupDtoToJSON,
    TeacherUpdateProfileDtoFromJSON,
    TeacherUpdateProfileDtoToJSON,
} from '../models/index';

export interface StudentGetQuestionRequest {
    questionId: number;
}

export interface StudentLoginRequest {
    studentLoginDto: StudentLoginDto;
}

export interface StudentSignupRequest {
    studentSignupDto: StudentSignupDto;
}

export interface StudentUpdateProfileRequest {
    studentUpdateProfileDto: StudentUpdateProfileDto;
}

export interface TeacherCreateQuestionRequest {
    body: object;
}

export interface TeacherGetParticularTeacherQuestionsRequest {
    teacherId: number;
}

export interface TeacherGetQuestionRequest {
    questionId: number;
}

export interface TeacherLoginRequest {
    teacherLoginDto: TeacherLoginDto;
}

export interface TeacherSignupRequest {
    teacherSignupDto: TeacherSignupDto;
}

export interface TeacherUpdateProfileRequest {
    teacherUpdateProfileDto: TeacherUpdateProfileDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async appControllerGetHelloRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerGetHello(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appControllerGetHelloRaw(initOverrides);
    }

    /**
     * 
     */
    async studentGetFirstnameRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentGetFirstname(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentGetFirstnameRaw(initOverrides);
    }

    /**
     * 
     */
    async studentGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentGetProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentGetProfileRaw(initOverrides);
    }

    /**
     * 
     */
    async studentGetQuestionRaw(requestParameters: StudentGetQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling studentGetQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters.questionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentGetQuestion(requestParameters: StudentGetQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentGetQuestionRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async studentGetQuestionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentGetQuestions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentGetQuestionsRaw(initOverrides);
    }

    /**
     * 
     */
    async studentLoginRaw(requestParameters: StudentLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.studentLoginDto === null || requestParameters.studentLoginDto === undefined) {
            throw new runtime.RequiredError('studentLoginDto','Required parameter requestParameters.studentLoginDto was null or undefined when calling studentLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentLoginDtoToJSON(requestParameters.studentLoginDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentLogin(requestParameters: StudentLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentLoginRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async studentSignupRaw(requestParameters: StudentSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.studentSignupDto === null || requestParameters.studentSignupDto === undefined) {
            throw new runtime.RequiredError('studentSignupDto','Required parameter requestParameters.studentSignupDto was null or undefined when calling studentSignup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentSignupDtoToJSON(requestParameters.studentSignupDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentSignup(requestParameters: StudentSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentSignupRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async studentUpdateProfileRaw(requestParameters: StudentUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.studentUpdateProfileDto === null || requestParameters.studentUpdateProfileDto === undefined) {
            throw new runtime.RequiredError('studentUpdateProfileDto','Required parameter requestParameters.studentUpdateProfileDto was null or undefined when calling studentUpdateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentUpdateProfileDtoToJSON(requestParameters.studentUpdateProfileDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async studentUpdateProfile(requestParameters: StudentUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studentUpdateProfileRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async teacherCreateQuestionRaw(requestParameters: TeacherCreateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling teacherCreateQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/questions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherCreateQuestion(requestParameters: TeacherCreateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherCreateQuestionRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async teacherGetFirstnameRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherGetFirstname(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherGetFirstnameRaw(initOverrides);
    }

    /**
     * 
     */
    async teacherGetParticularTeacherQuestionsRaw(requestParameters: TeacherGetParticularTeacherQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teacherId === null || requestParameters.teacherId === undefined) {
            throw new runtime.RequiredError('teacherId','Required parameter requestParameters.teacherId was null or undefined when calling teacherGetParticularTeacherQuestions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/{teacherId}/questions`.replace(`{${"teacherId"}}`, encodeURIComponent(String(requestParameters.teacherId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherGetParticularTeacherQuestions(requestParameters: TeacherGetParticularTeacherQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherGetParticularTeacherQuestionsRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async teacherGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherGetProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherGetProfileRaw(initOverrides);
    }

    /**
     * 
     */
    async teacherGetQuestionRaw(requestParameters: TeacherGetQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling teacherGetQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters.questionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherGetQuestion(requestParameters: TeacherGetQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherGetQuestionRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async teacherGetQuestionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherGetQuestions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherGetQuestionsRaw(initOverrides);
    }

    /**
     * 
     */
    async teacherLoginRaw(requestParameters: TeacherLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teacherLoginDto === null || requestParameters.teacherLoginDto === undefined) {
            throw new runtime.RequiredError('teacherLoginDto','Required parameter requestParameters.teacherLoginDto was null or undefined when calling teacherLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherLoginDtoToJSON(requestParameters.teacherLoginDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherLogin(requestParameters: TeacherLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherLoginRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async teacherSignupRaw(requestParameters: TeacherSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teacherSignupDto === null || requestParameters.teacherSignupDto === undefined) {
            throw new runtime.RequiredError('teacherSignupDto','Required parameter requestParameters.teacherSignupDto was null or undefined when calling teacherSignup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherSignupDtoToJSON(requestParameters.teacherSignupDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherSignup(requestParameters: TeacherSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherSignupRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async teacherUpdateProfileRaw(requestParameters: TeacherUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teacherUpdateProfileDto === null || requestParameters.teacherUpdateProfileDto === undefined) {
            throw new runtime.RequiredError('teacherUpdateProfileDto','Required parameter requestParameters.teacherUpdateProfileDto was null or undefined when calling teacherUpdateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherUpdateProfileDtoToJSON(requestParameters.teacherUpdateProfileDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async teacherUpdateProfile(requestParameters: TeacherUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teacherUpdateProfileRaw(requestParameters, initOverrides);
    }

}
