/* tslint:disable */
/* eslint-disable */
/**
 * Questionnaire Open Api
 * Questionnaire api description
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface QuestionCreateDto
 */
export interface QuestionCreateDto {
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'option3': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'option4': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreateDto
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface StudentAttemptB
 */
export interface StudentAttemptB {
    /**
     * 
     * @type {number}
     * @memberof StudentAttemptB
     */
    'questionId': number;
    /**
     * 
     * @type {string}
     * @memberof StudentAttemptB
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface StudentAttemptsB
 */
export interface StudentAttemptsB {
    /**
     * 
     * @type {Array<StudentAttemptB>}
     * @memberof StudentAttemptsB
     */
    'questions': Array<StudentAttemptB>;
}
/**
 * 
 * @export
 * @interface StudentAttemptsR
 */
export interface StudentAttemptsR {
    /**
     * 
     * @type {Array<StudentAttemptB>}
     * @memberof StudentAttemptsR
     */
    'answers': Array<StudentAttemptB>;
}
/**
 * 
 * @export
 * @interface StudentGetFirstnameR
 */
export interface StudentGetFirstnameR {
    /**
     * 
     * @type {string}
     * @memberof StudentGetFirstnameR
     */
    'firstname': string;
}
/**
 * 
 * @export
 * @interface StudentGetProfileR
 */
export interface StudentGetProfileR {
    /**
     * 
     * @type {string}
     * @memberof StudentGetProfileR
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetProfileR
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetProfileR
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetProfileR
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface StudentGetQuestionR
 */
export interface StudentGetQuestionR {
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'option3': string;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'option4': string;
    /**
     * 
     * @type {number}
     * @memberof StudentGetQuestionR
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentGetQuestionR
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof StudentGetQuestionR
     */
    'creatorId': number;
}
/**
 * 
 * @export
 * @interface StudentGetQuestionsR
 */
export interface StudentGetQuestionsR {
    /**
     * 
     * @type {Array<StudentGetQuestionR>}
     * @memberof StudentGetQuestionsR
     */
    'questions': Array<StudentGetQuestionR>;
}
/**
 * 
 * @export
 * @interface StudentLoginDto
 */
export interface StudentLoginDto {
    /**
     * 
     * @type {string}
     * @memberof StudentLoginDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StudentLoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface StudentLoginR
 */
export interface StudentLoginR {
    /**
     * 
     * @type {string}
     * @memberof StudentLoginR
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentLoginR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface StudentLogoutR
 */
export interface StudentLogoutR {
    /**
     * 
     * @type {string}
     * @memberof StudentLogoutR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface StudentSignupDto
 */
export interface StudentSignupDto {
    /**
     * 
     * @type {string}
     * @memberof StudentSignupDto
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentSignupDto
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentSignupDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StudentSignupDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface StudentSignupR
 */
export interface StudentSignupR {
    /**
     * 
     * @type {string}
     * @memberof StudentSignupR
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentSignupR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface StudentUpdateProfileDto
 */
export interface StudentUpdateProfileDto {
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileDto
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileDto
     */
    'lastname': string;
}
/**
 * 
 * @export
 * @interface StudentUpdateProfileR
 */
export interface StudentUpdateProfileR {
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileR
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileR
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileR
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileR
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdateProfileR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TeacherCreateQuestionR
 */
export interface TeacherCreateQuestionR {
    /**
     * 
     * @type {number}
     * @memberof TeacherCreateQuestionR
     */
    'questionId': number;
    /**
     * 
     * @type {string}
     * @memberof TeacherCreateQuestionR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TeacherFirstnameR
 */
export interface TeacherFirstnameR {
    /**
     * 
     * @type {string}
     * @memberof TeacherFirstnameR
     */
    'firstname': string;
}
/**
 * 
 * @export
 * @interface TeacherGetProfileR
 */
export interface TeacherGetProfileR {
    /**
     * 
     * @type {string}
     * @memberof TeacherGetProfileR
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetProfileR
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetProfileR
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetProfileR
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface TeacherGetQuestionR
 */
export interface TeacherGetQuestionR {
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'option3': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'option4': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionR
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof TeacherGetQuestionR
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof TeacherGetQuestionR
     */
    'creatorId': number;
}
/**
 * 
 * @export
 * @interface TeacherGetQuestionWithAnswerR
 */
export interface TeacherGetQuestionWithAnswerR {
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'option3': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'option4': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'answer': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionWithAnswerR
     */
    'creatorId': string;
}
/**
 * 
 * @export
 * @interface TeacherGetQuestionsR
 */
export interface TeacherGetQuestionsR {
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'option3': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherGetQuestionsR
     */
    'option4': string;
    /**
     * 
     * @type {Array<TeacherGetQuestionR>}
     * @memberof TeacherGetQuestionsR
     */
    'questions': Array<TeacherGetQuestionR>;
}
/**
 * 
 * @export
 * @interface TeacherLoginDto
 */
export interface TeacherLoginDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherLoginDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherLoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TeacherLoginR
 */
export interface TeacherLoginR {
    /**
     * 
     * @type {string}
     * @memberof TeacherLoginR
     */
    'firstname': string;
}
/**
 * 
 * @export
 * @interface TeacherLogoutR
 */
export interface TeacherLogoutR {
    /**
     * 
     * @type {string}
     * @memberof TeacherLogoutR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TeacherSignupDto
 */
export interface TeacherSignupDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherSignupDto
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherSignupDto
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherSignupDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherSignupDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TeacherUpdateProfileDto
 */
export interface TeacherUpdateProfileDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileDto
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileDto
     */
    'lastname': string;
}
/**
 * 
 * @export
 * @interface TeacherUpdateProfileR
 */
export interface TeacherUpdateProfileR {
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileR
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileR
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileR
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileR
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateProfileR
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TeacherUpdateQuestionB
 */
export interface TeacherUpdateQuestionB {
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'option3': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'option4': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionB
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface TeacherUpdateQuestionR
 */
export interface TeacherUpdateQuestionR {
    /**
     * 
     * @type {number}
     * @memberof TeacherUpdateQuestionR
     */
    'questionId': number;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdateQuestionR
     */
    'message': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {StudentAttemptsB} studentAttemptsB 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentAttempt: async (studentAttemptsB: StudentAttemptsB, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentAttemptsB' is not null or undefined
            assertParamExists('studentAttempt', 'studentAttemptsB', studentAttemptsB)
            const localVarPath = `/students/attempt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentAttemptsB, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetFirstname: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/students/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/students/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetQuestion: async (questionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('studentGetQuestion', 'questionId', questionId)
            const localVarPath = `/students/questions/{questionId}`
                .replace(`{${"questionId"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetQuestions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/students/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {StudentLoginDto} studentLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentLogin: async (studentLoginDto: StudentLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentLoginDto' is not null or undefined
            assertParamExists('studentLogin', 'studentLoginDto', studentLoginDto)
            const localVarPath = `/students/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/students/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {StudentSignupDto} studentSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentSignup: async (studentSignupDto: StudentSignupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentSignupDto' is not null or undefined
            assertParamExists('studentSignup', 'studentSignupDto', studentSignupDto)
            const localVarPath = `/students/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentSignupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {StudentUpdateProfileDto} studentUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentUpdateProfile: async (studentUpdateProfileDto: StudentUpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentUpdateProfileDto' is not null or undefined
            assertParamExists('studentUpdateProfile', 'studentUpdateProfileDto', studentUpdateProfileDto)
            const localVarPath = `/students/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentUpdateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {QuestionCreateDto} questionCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherCreateQuestion: async (questionCreateDto: QuestionCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionCreateDto' is not null or undefined
            assertParamExists('teacherCreateQuestion', 'questionCreateDto', questionCreateDto)
            const localVarPath = `/teachers/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetFirstname: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teachers/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetParticularTeacherQuestions: async (teacherId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('teacherGetParticularTeacherQuestions', 'teacherId', teacherId)
            const localVarPath = `/teachers/{teacherId}/questions`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teachers/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetQuestion: async (questionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('teacherGetQuestion', 'questionId', questionId)
            const localVarPath = `/teachers/questions/{questionId}`
                .replace(`{${"questionId"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetQuestions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teachers/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {TeacherLoginDto} teacherLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherLogin: async (teacherLoginDto: TeacherLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherLoginDto' is not null or undefined
            assertParamExists('teacherLogin', 'teacherLoginDto', teacherLoginDto)
            const localVarPath = `/teachers/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teachers/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {TeacherSignupDto} teacherSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherSignup: async (teacherSignupDto: TeacherSignupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherSignupDto' is not null or undefined
            assertParamExists('teacherSignup', 'teacherSignupDto', teacherSignupDto)
            const localVarPath = `/teachers/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherSignupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {TeacherUpdateProfileDto} teacherUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherUpdateProfile: async (teacherUpdateProfileDto: TeacherUpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherUpdateProfileDto' is not null or undefined
            assertParamExists('teacherUpdateProfile', 'teacherUpdateProfileDto', teacherUpdateProfileDto)
            const localVarPath = `/teachers/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherUpdateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {TeacherUpdateQuestionB} teacherUpdateQuestionB 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherUpdateQuestion: async (questionId: number, teacherUpdateQuestionB: TeacherUpdateQuestionB, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('teacherUpdateQuestion', 'questionId', questionId)
            // verify required parameter 'teacherUpdateQuestionB' is not null or undefined
            assertParamExists('teacherUpdateQuestion', 'teacherUpdateQuestionB', teacherUpdateQuestionB)
            const localVarPath = `/teachers/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (questionId !== undefined) {
                localVarQueryParameter['questionId'] = questionId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherUpdateQuestionB, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {StudentAttemptsB} studentAttemptsB 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentAttempt(studentAttemptsB: StudentAttemptsB, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAttemptsR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentAttempt(studentAttemptsB, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentGetFirstname(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentGetFirstnameR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentGetFirstname(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentUpdateProfileR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentGetQuestion(questionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentGetQuestionR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentGetQuestion(questionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentGetQuestions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentGetQuestionsR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentGetQuestions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {StudentLoginDto} studentLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentLogin(studentLoginDto: StudentLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentLoginR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentLogin(studentLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentLogoutR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {StudentSignupDto} studentSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentSignup(studentSignupDto: StudentSignupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentSignupR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentSignup(studentSignupDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {StudentUpdateProfileDto} studentUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentUpdateProfile(studentUpdateProfileDto: StudentUpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentGetProfileR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentUpdateProfile(studentUpdateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {QuestionCreateDto} questionCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherCreateQuestion(questionCreateDto: QuestionCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCreateQuestionR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherCreateQuestion(questionCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetFirstname(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherFirstnameR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetFirstname(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetParticularTeacherQuestions(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetParticularTeacherQuestions(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherGetProfileR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetQuestion(questionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherGetQuestionWithAnswerR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetQuestion(questionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetQuestions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherGetQuestionsR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetQuestions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {TeacherLoginDto} teacherLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherLogin(teacherLoginDto: TeacherLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherLoginR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherLogin(teacherLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherLogoutR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {TeacherSignupDto} teacherSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherSignup(teacherSignupDto: TeacherSignupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherLoginR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherSignup(teacherSignupDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {TeacherUpdateProfileDto} teacherUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherUpdateProfile(teacherUpdateProfileDto: TeacherUpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherUpdateProfileR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherUpdateProfile(teacherUpdateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {TeacherUpdateQuestionB} teacherUpdateQuestionB 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherUpdateQuestion(questionId: number, teacherUpdateQuestionB: TeacherUpdateQuestionB, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherUpdateQuestionR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherUpdateQuestion(questionId, teacherUpdateQuestionB, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {StudentAttemptsB} studentAttemptsB 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentAttempt(studentAttemptsB: StudentAttemptsB, options?: any): AxiosPromise<StudentAttemptsR> {
            return localVarFp.studentAttempt(studentAttemptsB, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetFirstname(options?: any): AxiosPromise<StudentGetFirstnameR> {
            return localVarFp.studentGetFirstname(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetProfile(options?: any): AxiosPromise<StudentUpdateProfileR> {
            return localVarFp.studentGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetQuestion(questionId: number, options?: any): AxiosPromise<StudentGetQuestionR> {
            return localVarFp.studentGetQuestion(questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentGetQuestions(options?: any): AxiosPromise<StudentGetQuestionsR> {
            return localVarFp.studentGetQuestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {StudentLoginDto} studentLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentLogin(studentLoginDto: StudentLoginDto, options?: any): AxiosPromise<StudentLoginR> {
            return localVarFp.studentLogin(studentLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentLogout(options?: any): AxiosPromise<StudentLogoutR> {
            return localVarFp.studentLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {StudentSignupDto} studentSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentSignup(studentSignupDto: StudentSignupDto, options?: any): AxiosPromise<StudentSignupR> {
            return localVarFp.studentSignup(studentSignupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {StudentUpdateProfileDto} studentUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentUpdateProfile(studentUpdateProfileDto: StudentUpdateProfileDto, options?: any): AxiosPromise<StudentGetProfileR> {
            return localVarFp.studentUpdateProfile(studentUpdateProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {QuestionCreateDto} questionCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherCreateQuestion(questionCreateDto: QuestionCreateDto, options?: any): AxiosPromise<TeacherCreateQuestionR> {
            return localVarFp.teacherCreateQuestion(questionCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetFirstname(options?: any): AxiosPromise<TeacherFirstnameR> {
            return localVarFp.teacherGetFirstname(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetParticularTeacherQuestions(teacherId: number, options?: any): AxiosPromise<void> {
            return localVarFp.teacherGetParticularTeacherQuestions(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetProfile(options?: any): AxiosPromise<TeacherGetProfileR> {
            return localVarFp.teacherGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetQuestion(questionId: number, options?: any): AxiosPromise<TeacherGetQuestionWithAnswerR> {
            return localVarFp.teacherGetQuestion(questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetQuestions(options?: any): AxiosPromise<TeacherGetQuestionsR> {
            return localVarFp.teacherGetQuestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {TeacherLoginDto} teacherLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherLogin(teacherLoginDto: TeacherLoginDto, options?: any): AxiosPromise<TeacherLoginR> {
            return localVarFp.teacherLogin(teacherLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherLogout(options?: any): AxiosPromise<TeacherLogoutR> {
            return localVarFp.teacherLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {TeacherSignupDto} teacherSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherSignup(teacherSignupDto: TeacherSignupDto, options?: any): AxiosPromise<TeacherLoginR> {
            return localVarFp.teacherSignup(teacherSignupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {TeacherUpdateProfileDto} teacherUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherUpdateProfile(teacherUpdateProfileDto: TeacherUpdateProfileDto, options?: any): AxiosPromise<TeacherUpdateProfileR> {
            return localVarFp.teacherUpdateProfile(teacherUpdateProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} questionId 
         * @param {TeacherUpdateQuestionB} teacherUpdateQuestionB 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherUpdateQuestion(questionId: number, teacherUpdateQuestionB: TeacherUpdateQuestionB, options?: any): AxiosPromise<TeacherUpdateQuestionR> {
            return localVarFp.teacherUpdateQuestion(questionId, teacherUpdateQuestionB, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {StudentAttemptsB} studentAttemptsB 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentAttempt(studentAttemptsB: StudentAttemptsB, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentAttempt(studentAttemptsB, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentGetFirstname(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentGetFirstname(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentGetProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentGetQuestion(questionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentGetQuestion(questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentGetQuestions(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentGetQuestions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {StudentLoginDto} studentLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentLogin(studentLoginDto: StudentLoginDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentLogin(studentLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentLogout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {StudentSignupDto} studentSignupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentSignup(studentSignupDto: StudentSignupDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentSignup(studentSignupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {StudentUpdateProfileDto} studentUpdateProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public studentUpdateProfile(studentUpdateProfileDto: StudentUpdateProfileDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).studentUpdateProfile(studentUpdateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {QuestionCreateDto} questionCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherCreateQuestion(questionCreateDto: QuestionCreateDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherCreateQuestion(questionCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherGetFirstname(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherGetFirstname(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherGetParticularTeacherQuestions(teacherId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherGetParticularTeacherQuestions(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherGetProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherGetQuestion(questionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherGetQuestion(questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherGetQuestions(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherGetQuestions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {TeacherLoginDto} teacherLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherLogin(teacherLoginDto: TeacherLoginDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherLogin(teacherLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherLogout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {TeacherSignupDto} teacherSignupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherSignup(teacherSignupDto: TeacherSignupDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherSignup(teacherSignupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {TeacherUpdateProfileDto} teacherUpdateProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherUpdateProfile(teacherUpdateProfileDto: TeacherUpdateProfileDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherUpdateProfile(teacherUpdateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} questionId 
     * @param {TeacherUpdateQuestionB} teacherUpdateQuestionB 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teacherUpdateQuestion(questionId: number, teacherUpdateQuestionB: TeacherUpdateQuestionB, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).teacherUpdateQuestion(questionId, teacherUpdateQuestionB, options).then((request) => request(this.axios, this.basePath));
    }
}



